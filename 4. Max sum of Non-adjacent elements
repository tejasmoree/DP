public class maxSum {
    public static int recr(int n, int arr[]) {
        if (n == 0)
            return arr[0];
        if (n < 0)
            return 0;

        int pick = arr[n] + recr(n - 2, arr);
        int notpick = 0 + recr(n - 1, arr);
        return Math.max(pick, notpick);

    }

    public static int memo(int n, int arr[], int dp[]) {
        if (n == 0)
            return arr[0];
        if (n < 0)
            return 0;

        if (dp[n] != 0)
            return dp[n];

        int pick = arr[n] + memo(n - 2, arr, dp);
        int notpick = 0 + memo(n - 1, arr, dp);

        return dp[n] = Math.max(pick, notpick);
    }

    public static int tabu(int n, int arr[], int dp[]) {
        dp[0] = arr[0];
        int neg = 0;

        for (int i = 1; i <= n; i++) {
            int take = arr[i];
            take += (i > 1) ? dp[i - 2] : neg;
            int nottake = 0 + dp[i - 1];
            dp[i] = Math.max(take, nottake);
        }
        return dp[n];
    }

    public static int sopt(int n, int arr[]) {
        int prev = arr[0];
        int prev2 = 0;

        for (int i = 1; i <= n; i++) {
            int take = arr[i];
            if (i > 1)
                take += prev2;
            int nottake = prev;

            int curi = Math.max(take, nottake);
            prev2 = prev;
            prev = curi;
        }
        return prev;
    }

    public static void main(String[] args) {
        int arr[] = { 1, 2, 4, 9 };
        System.out.println(recr(3, arr));

        int dp[] = new int[4];
        System.out.println(memo(3, arr, dp));

        System.out.println(tabu(3, arr, dp));

        System.out.println(sopt(3, arr));
    }
}
